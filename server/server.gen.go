// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// BookMetadata defines model for BookMetadata.
type BookMetadata struct {
	Asin   *string `json:"asin,omitempty"`
	Author *string `json:"author,omitempty"`

	// Cover URL to the cover image
	Cover       *string `json:"cover,omitempty"`
	Description *string `json:"description,omitempty"`

	// Duration Duration in seconds
	Duration      *int64    `json:"duration,omitempty"`
	Genres        *[]string `json:"genres,omitempty"`
	Isbn          *string   `json:"isbn,omitempty"`
	Language      *string   `json:"language,omitempty"`
	Narrator      *string   `json:"narrator,omitempty"`
	PublishedYear *string   `json:"publishedYear,omitempty"`
	Publisher     *string   `json:"publisher,omitempty"`
	Series        *[]struct {
		Sequence *int64 `json:"sequence,omitempty"`
		Series   string `json:"series"`
	} `json:"series,omitempty"`
	Subtitle *string   `json:"subtitle,omitempty"`
	Tags     *[]string `json:"tags,omitempty"`
	Title    string    `json:"title"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	Query  string  `form:"query" json:"query"`
	Author *string `form:"author,omitempty" json:"author,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for books
	// (GET /search)
	Search(w http.ResponseWriter, r *http.Request, params SearchParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Search for books
// (GET /search)
func (_ Unimplemented) Search(w http.ResponseWriter, r *http.Request, params SearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams

	// ------------- Required query parameter "query" -------------

	if paramValue := r.URL.Query().Get("query"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "query"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.Search)
	})

	return r
}

type SearchRequestObject struct {
	Params SearchParams
}

type SearchResponseObject interface {
	VisitSearchResponse(w http.ResponseWriter) error
}

type Search200JSONResponse struct {
	Matches *[]BookMetadata `json:"matches,omitempty"`
}

func (response Search200JSONResponse) VisitSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Search400JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response Search400JSONResponse) VisitSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Search401JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response Search401JSONResponse) VisitSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Search500JSONResponse struct {
	Error *string `json:"error,omitempty"`
}

func (response Search500JSONResponse) VisitSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Search for books
	// (GET /search)
	Search(ctx context.Context, request SearchRequestObject) (SearchResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Search operation middleware
func (sh *strictHandler) Search(w http.ResponseWriter, r *http.Request, params SearchParams) {
	var request SearchRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Search(ctx, request.(SearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Search")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchResponseObject); ok {
		if err := validResponse.VisitSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTW/bSAz9KwJ3j4albLJ70C3ZFqiRpCnycWgDoxiPaGkSaUbhUAHcQP+94EiOKltJ",
	"W/SQkyWRfPx8z0+gXVU7i5Y9pE/gdYGVCo8nzt2fI6tMsZL3mlyNxAaDVXlj5XftqFIMafdhBrypEVLw",
	"TMbm0M5ANVw4Etc9k3aPGCwZek2mZuMspHBzeRaxi7jAKHhEplI5TmGP4iYSZA2prXGc411viYyNPGpn",
	"Mw+zoRlj+b+jIaOxjDmSQOZoqZuAYaz8ZNr+gyJSG3k3fjWeVfgw0U+pbN5Ir1OoVvD4hVHWzao0vsDs",
	"M6rXPaatHsnstDXet8eHBq3GcR8vjmnA20nVzoDwoTGEGaS3W7/lM4Zb3aHmqSn6ZsWGy+nhsMp/cykv",
	"Ye0U2Lnt1xd61A0Z3lwJZ3pW1ObrPW5CJXJmBaoMCWR5lUQf31x/uLhcfDm+Xlx8HAananOKG2gF1di1",
	"k/jSaLQ+VNgHny+uYQYNlQLMXPs0jl2N1ruGNM4d5XEf5GPxHZqE/xvProq2dI4+kXs0XWWPSL7jRDI/",
	"mCcSJaCqNpDC4TyZJzCDWnERGow9KtKFPObI+7y6CuZo7ShaOXcvpJIrClxbZM8OAZJUhYzkIb3tx/XQ",
	"IG2GaW1fh30wNTjrRWpyd9NAvQa9FrmUNL52Mj2x/5Mk8qOdZbTc7bYujQ6dxHe+E5UBb8yWSrEudvj0",
	"N+EaUvgrHhQ37uU2Hmnt3rG2+9e3K35wcSpxR39UNRJNysuv5D9RWXQpGuG5K+TgjQq5sd22zTfMpJJ/",
	"32wkC8tIVpXRFZL8jb0PWD8qR7j8Z824XcoV+qaqFG2muNT+NDYk6gg1ruXMaVVO8r/Tk1LshfOcHiZJ",
	"Au2y/R4AAP//aDO7cxoIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
